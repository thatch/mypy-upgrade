[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mypy-upgrade"
dynamic = ["version"]
description = "automatic error suppression for mypy"
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
keywords = ["type checking"]
authors = [
  { name = "Ugochukwu Nwosu", email = "ugognw@gmail.com" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development",
]
dependencies = []

[project.scripts]
mypy-upgrade = "mypy_upgrade.cli:main"

[project.urls]
Documentation = "https://github.com/ugognw/mypy-upgrade#readme"
Issues = "https://github.com/ugognw/mypy-upgrade/issues"
Source = "https://github.com/ugognw/mypy-upgrade"

[tool.black]
target-version = ["py311"]
line-length = 79
skip-string-normalization = true

[tool.coverage.run]
source_pkgs = ["mypy_upgrade", "tests"]
branch = true
parallel = true
omit = [
  "src/mypy_upgrade/__about__.py",
]

[tool.coverage.paths]
mypy_upgrade = ["src/mypy_upgrade"]
tests = ["tests", "*/mypy-upgrade/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.hatch.build]
ignore-vcs = true
packages = ["src/mypy_upgrade"]
include = [
  "/tests",
]

[[tool.hatch.envs.all.matrix]]
python = [
  "3.7",
  "3.8",
  "3.9",
  "3.10",
  "3.11",
  "3.12",
  "3.13",
  "pypy3.7",
  "pypy3.8",
  "pypy3.9",
  "pypy3.10"
]

[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-datadir",
  "pytest-xdist",
  "pre-commit"
]
python = "3.11"

[tool.hatch.envs.default.env-vars]
PYTHONPATH="src"

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest -n auto --cov=mypy_upgrade --cov-report=html --cov-report=lcov --cov-report=xml --cov-report=term-missing tests/"

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
python = "3.11"

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/mypy_upgrade tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.hatch.version]
path = "src/mypy_upgrade/__about__.py"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "-ra",
    "--strict-markers",
    "--doctest-modules",
    "--doctest-glob=*.md",
    "--tb=short"
]
filterwarnings = "error"
norecursedirs = "migrations"
python_files = [
    "test_*.py",
    "*_test.py",
    "tests.py"
]
testpaths = "tests"
markers = [
  "value",
  "results_file"
]

[tool.ruff]
target-version = "py311"
line-length = 79
select = [
  "A",
  "ARG",
  "B",
  "C",
  "C4",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "FBT",
  "I",
  "ICN",
  "INT",
  "ISC",
  "N",
  "PIE",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "PT",
  "PTH",
  "Q",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["mypy_upgrade"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
